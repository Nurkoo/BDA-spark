// <auto-generated />
using System;
using BigDataAcademy.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BigDataAcademy.Model.Data.Migrations
{
    [DbContext(typeof(BdaPostgresContext))]
    [Migration("20230730151251_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BigDataAcademy.Model.Claim.ClaimHubClaim", b =>
                {
                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint")
                        .HasColumnName("claim_id");

                    b.Property<string>("ClaimBroker")
                        .HasColumnType("text")
                        .HasColumnName("claim_broker");

                    b.Property<string>("ClaimTier")
                        .HasColumnType("text")
                        .HasColumnName("claim_tier");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("FaultRating")
                        .HasColumnType("text")
                        .HasColumnName("fault_rating");

                    b.Property<string>("HowReported")
                        .HasColumnType("text")
                        .HasColumnName("how_reported");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<string>("LossCause")
                        .HasColumnType("text")
                        .HasColumnName("loss_cause");

                    b.Property<DateOnly?>("LossDate")
                        .HasColumnType("date")
                        .HasColumnName("loss_date");

                    b.Property<string>("LossType")
                        .HasColumnType("text")
                        .HasColumnName("loss_type");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("policy_number");

                    b.Property<string>("PolicySourceSystem")
                        .HasColumnType("text")
                        .HasColumnName("policy_source_system");

                    b.Property<string>("ProductLine")
                        .HasColumnType("text")
                        .HasColumnName("product_line");

                    b.Property<string>("Situation")
                        .HasColumnType("text")
                        .HasColumnName("situation");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("ClaimId");

                    b.ToTable("claim_hub_claim");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Claim.ClaimProClaim", b =>
                {
                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint")
                        .HasColumnName("claim_id");

                    b.Property<string>("ClaimBroker")
                        .HasColumnType("text")
                        .HasColumnName("claim_broker");

                    b.Property<string>("ClaimTier")
                        .HasColumnType("text")
                        .HasColumnName("claim_tier");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("FaultRating")
                        .HasColumnType("text")
                        .HasColumnName("fault_rating");

                    b.Property<string>("HowReported")
                        .HasColumnType("text")
                        .HasColumnName("how_reported");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<string>("LossCause")
                        .HasColumnType("text")
                        .HasColumnName("loss_cause");

                    b.Property<DateOnly?>("LossDate")
                        .HasColumnType("date")
                        .HasColumnName("loss_date");

                    b.Property<string>("LossType")
                        .HasColumnType("text")
                        .HasColumnName("loss_type");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("policy_number");

                    b.Property<string>("PolicySourceSystem")
                        .HasColumnType("text")
                        .HasColumnName("policy_source_system");

                    b.Property<string>("ProductLine")
                        .HasColumnType("text")
                        .HasColumnName("product_line");

                    b.Property<string>("Situation")
                        .HasColumnType("text")
                        .HasColumnName("situation");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("ClaimId");

                    b.ToTable("claim_pro_claim");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Claim.ClaimProClaimView", b =>
                {
                    b.Property<string>("ClaimBroker")
                        .HasColumnType("text");

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimTier")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("FaultRating")
                        .HasColumnType("text");

                    b.Property<string>("HowReported")
                        .HasColumnType("text");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LossCause")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("LossDate")
                        .HasColumnType("date");

                    b.Property<string>("LossType")
                        .HasColumnType("text");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text");

                    b.Property<string>("PolicySourceSystem")
                        .HasColumnType("text");

                    b.Property<string>("ProductLine")
                        .HasColumnType("text");

                    b.Property<string>("Situation")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("view_claim_pro_claim", (string)null);
                });

            modelBuilder.Entity("BigDataAcademy.Model.Claim.ClaimZoneClaim", b =>
                {
                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint")
                        .HasColumnName("claim_id");

                    b.Property<string>("ClaimBroker")
                        .HasColumnType("text")
                        .HasColumnName("claim_broker");

                    b.Property<string>("ClaimTier")
                        .HasColumnType("text")
                        .HasColumnName("claim_tier");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("FaultRating")
                        .HasColumnType("text")
                        .HasColumnName("fault_rating");

                    b.Property<string>("HowReported")
                        .HasColumnType("text")
                        .HasColumnName("how_reported");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<string>("LossCause")
                        .HasColumnType("text")
                        .HasColumnName("loss_cause");

                    b.Property<DateOnly?>("LossDate")
                        .HasColumnType("date")
                        .HasColumnName("loss_date");

                    b.Property<string>("LossType")
                        .HasColumnType("text")
                        .HasColumnName("loss_type");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("policy_number");

                    b.Property<string>("PolicySourceSystem")
                        .HasColumnType("text")
                        .HasColumnName("policy_source_system");

                    b.Property<string>("ProductLine")
                        .HasColumnType("text")
                        .HasColumnName("product_line");

                    b.Property<string>("Situation")
                        .HasColumnType("text")
                        .HasColumnName("situation");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("ClaimId");

                    b.ToTable("claim_zone_claim");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Claim.InsureWaveClaim", b =>
                {
                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint")
                        .HasColumnName("claim_id");

                    b.Property<string>("ClaimBroker")
                        .HasColumnType("text")
                        .HasColumnName("claim_broker");

                    b.Property<string>("ClaimTier")
                        .HasColumnType("text")
                        .HasColumnName("claim_tier");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("FaultRating")
                        .HasColumnType("text")
                        .HasColumnName("fault_rating");

                    b.Property<string>("HowReported")
                        .HasColumnType("text")
                        .HasColumnName("how_reported");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<string>("LossCause")
                        .HasColumnType("text")
                        .HasColumnName("loss_cause");

                    b.Property<DateOnly?>("LossDate")
                        .HasColumnType("date")
                        .HasColumnName("loss_date");

                    b.Property<string>("LossType")
                        .HasColumnType("text")
                        .HasColumnName("loss_type");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("policy_number");

                    b.Property<string>("PolicySourceSystem")
                        .HasColumnType("text")
                        .HasColumnName("policy_source_system");

                    b.Property<string>("ProductLine")
                        .HasColumnType("text")
                        .HasColumnName("product_line");

                    b.Property<string>("Situation")
                        .HasColumnType("text")
                        .HasColumnName("situation");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("ClaimId");

                    b.ToTable("insure_wave_claim");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Event.IntegrationEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("ProcessAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("process_at");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean")
                        .HasColumnName("processed");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("EventId");

                    b.ToTable("integration_event");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Exposure.ClaimHubExposure", b =>
                {
                    b.Property<long>("ExposureId")
                        .HasColumnType("bigint")
                        .HasColumnName("exposure_id");

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint")
                        .HasColumnName("claim_id");

                    b.Property<string>("ExposureType")
                        .HasColumnType("text")
                        .HasColumnName("exposure_type");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<string>("SourceId")
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.Property<decimal?>("TotalPayments")
                        .HasColumnType("numeric")
                        .HasColumnName("total_payments");

                    b.HasKey("ExposureId");

                    b.ToTable("claim_hub_exposure");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Exposure.ClaimProExposure", b =>
                {
                    b.Property<long>("ExposureId")
                        .HasColumnType("bigint")
                        .HasColumnName("exposure_id");

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint")
                        .HasColumnName("claim_id");

                    b.Property<string>("ExposureType")
                        .HasColumnType("text")
                        .HasColumnName("exposure_type");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<string>("SourceId")
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.Property<decimal?>("TotalPayments")
                        .HasColumnType("numeric")
                        .HasColumnName("total_payments");

                    b.HasKey("ExposureId");

                    b.ToTable("claim_pro_exposure");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Exposure.ClaimProExposureView", b =>
                {
                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExposureId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExposureType")
                        .HasColumnType("text");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceId")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalPayments")
                        .HasColumnType("numeric");

                    b.ToTable((string)null);

                    b.ToView("view_claim_pro_exposure", (string)null);
                });

            modelBuilder.Entity("BigDataAcademy.Model.Exposure.ClaimZoneExposure", b =>
                {
                    b.Property<long>("ExposureId")
                        .HasColumnType("bigint")
                        .HasColumnName("exposure_id");

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint")
                        .HasColumnName("claim_id");

                    b.Property<string>("ExposureType")
                        .HasColumnType("text")
                        .HasColumnName("exposure_type");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<string>("SourceId")
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.Property<decimal?>("TotalPayments")
                        .HasColumnType("numeric")
                        .HasColumnName("total_payments");

                    b.HasKey("ExposureId");

                    b.HasIndex("ClaimId");

                    b.ToTable("claim_zone_exposure");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Exposure.InsureWaveExposure", b =>
                {
                    b.Property<long>("ExposureId")
                        .HasColumnType("bigint")
                        .HasColumnName("exposure_id");

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint")
                        .HasColumnName("claim_id");

                    b.Property<string>("ExposureType")
                        .HasColumnType("text")
                        .HasColumnName("exposure_type");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<string>("SourceId")
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.Property<decimal?>("TotalPayments")
                        .HasColumnType("numeric")
                        .HasColumnName("total_payments");

                    b.HasKey("ExposureId");

                    b.HasIndex("ClaimId");

                    b.ToTable("insure_wave_exposure");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Motor.ClaimHubMotor", b =>
                {
                    b.Property<long>("MotorId")
                        .HasColumnType("bigint")
                        .HasColumnName("motor_id");

                    b.Property<int?>("AverageMileageForValuation")
                        .HasColumnType("integer")
                        .HasColumnName("average_mileage_for_valuation");

                    b.Property<string>("Colour")
                        .HasColumnType("text")
                        .HasColumnName("colour");

                    b.Property<string>("DamageDescription")
                        .HasColumnType("text")
                        .HasColumnName("damage_description");

                    b.Property<int?>("Doors")
                        .HasColumnType("integer")
                        .HasColumnName("doors");

                    b.Property<DateOnly?>("DriverDateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("driver_date_of_birth");

                    b.Property<int?>("EngineCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("engine_capacity");

                    b.Property<string>("FuelType")
                        .HasColumnType("text")
                        .HasColumnName("fuel_type");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<DateTime?>("LossDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loss_date");

                    b.Property<string>("Make")
                        .HasColumnType("text")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("policy_number");

                    b.Property<decimal?>("PreAccidentValue")
                        .HasColumnType("numeric")
                        .HasColumnName("pre_accident_value");

                    b.Property<decimal?>("RepairCost")
                        .HasColumnType("numeric")
                        .HasColumnName("repair_cost");

                    b.Property<int?>("Seats")
                        .HasColumnType("integer")
                        .HasColumnName("seats");

                    b.Property<string>("SourceId")
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.Property<string>("TotalLostDecision")
                        .HasColumnType("text")
                        .HasColumnName("total_lost_decision");

                    b.Property<string>("VehicleRegistrationNumber")
                        .HasColumnType("text")
                        .HasColumnName("vehicle_registration_number");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("year");

                    b.HasKey("MotorId");

                    b.ToTable("claim_hub_motor");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Motor.ClaimProMotor", b =>
                {
                    b.Property<long>("MotorId")
                        .HasColumnType("bigint")
                        .HasColumnName("motor_id");

                    b.Property<int?>("AverageMileageForValuation")
                        .HasColumnType("integer")
                        .HasColumnName("average_mileage_for_valuation");

                    b.Property<string>("Colour")
                        .HasColumnType("text")
                        .HasColumnName("colour");

                    b.Property<string>("DamageDescription")
                        .HasColumnType("text")
                        .HasColumnName("damage_description");

                    b.Property<int?>("Doors")
                        .HasColumnType("integer")
                        .HasColumnName("doors");

                    b.Property<DateOnly?>("DriverDateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("driver_date_of_birth");

                    b.Property<int?>("EngineCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("engine_capacity");

                    b.Property<string>("FuelType")
                        .HasColumnType("text")
                        .HasColumnName("fuel_type");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<DateTime?>("LossDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loss_date");

                    b.Property<string>("Make")
                        .HasColumnType("text")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("policy_number");

                    b.Property<decimal?>("PreAccidentValue")
                        .HasColumnType("numeric")
                        .HasColumnName("pre_accident_value");

                    b.Property<decimal?>("RepairCost")
                        .HasColumnType("numeric")
                        .HasColumnName("repair_cost");

                    b.Property<int?>("Seats")
                        .HasColumnType("integer")
                        .HasColumnName("seats");

                    b.Property<string>("SourceId")
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.Property<string>("TotalLostDecision")
                        .HasColumnType("text")
                        .HasColumnName("total_lost_decision");

                    b.Property<string>("VehicleRegistrationNumber")
                        .HasColumnType("text")
                        .HasColumnName("vehicle_registration_number");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("year");

                    b.HasKey("MotorId");

                    b.ToTable("claim_pro_motor");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Motor.ClaimProMotorView", b =>
                {
                    b.Property<int?>("AverageMileageForValuation")
                        .HasColumnType("integer");

                    b.Property<string>("Colour")
                        .HasColumnType("text");

                    b.Property<string>("DamageDescription")
                        .HasColumnType("text");

                    b.Property<int?>("Doors")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("DriverDateOfBirth")
                        .HasColumnType("date");

                    b.Property<int?>("EngineCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("FuelType")
                        .HasColumnType("text");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LossDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Make")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<long>("MotorId")
                        .HasColumnType("bigint");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text");

                    b.Property<decimal?>("PreAccidentValue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RepairCost")
                        .HasColumnType("numeric");

                    b.Property<int?>("Seats")
                        .HasColumnType("integer");

                    b.Property<string>("SourceId")
                        .HasColumnType("text");

                    b.Property<string>("TotalLostDecision")
                        .HasColumnType("text");

                    b.Property<string>("VehicleRegistrationNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable((string)null);

                    b.ToView("view_claim_pro_motor", (string)null);
                });

            modelBuilder.Entity("BigDataAcademy.Model.Motor.ClaimZoneMotor", b =>
                {
                    b.Property<long>("MotorId")
                        .HasColumnType("bigint")
                        .HasColumnName("motor_id");

                    b.Property<int?>("AverageMileageForValuation")
                        .HasColumnType("integer")
                        .HasColumnName("average_mileage_for_valuation");

                    b.Property<string>("Colour")
                        .HasColumnType("text")
                        .HasColumnName("colour");

                    b.Property<string>("DamageDescription")
                        .HasColumnType("text")
                        .HasColumnName("damage_description");

                    b.Property<int?>("Doors")
                        .HasColumnType("integer")
                        .HasColumnName("doors");

                    b.Property<DateOnly?>("DriverDateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("driver_date_of_birth");

                    b.Property<int?>("EngineCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("engine_capacity");

                    b.Property<string>("FuelType")
                        .HasColumnType("text")
                        .HasColumnName("fuel_type");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<DateTime?>("LossDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loss_date");

                    b.Property<string>("Make")
                        .HasColumnType("text")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("policy_number");

                    b.Property<decimal?>("PreAccidentValue")
                        .HasColumnType("numeric")
                        .HasColumnName("pre_accident_value");

                    b.Property<decimal?>("RepairCost")
                        .HasColumnType("numeric")
                        .HasColumnName("repair_cost");

                    b.Property<int?>("Seats")
                        .HasColumnType("integer")
                        .HasColumnName("seats");

                    b.Property<string>("SourceId")
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.Property<string>("TotalLostDecision")
                        .HasColumnType("text")
                        .HasColumnName("total_lost_decision");

                    b.Property<string>("VehicleRegistrationNumber")
                        .HasColumnType("text")
                        .HasColumnName("vehicle_registration_number");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("year");

                    b.HasKey("MotorId");

                    b.ToTable("claim_zone_motor");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Motor.InsureWaveMotor", b =>
                {
                    b.Property<long>("MotorId")
                        .HasColumnType("bigint")
                        .HasColumnName("motor_id");

                    b.Property<int?>("AverageMileageForValuation")
                        .HasColumnType("integer")
                        .HasColumnName("average_mileage_for_valuation");

                    b.Property<string>("Colour")
                        .HasColumnType("text")
                        .HasColumnName("colour");

                    b.Property<string>("DamageDescription")
                        .HasColumnType("text")
                        .HasColumnName("damage_description");

                    b.Property<int?>("Doors")
                        .HasColumnType("integer")
                        .HasColumnName("doors");

                    b.Property<DateOnly?>("DriverDateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("driver_date_of_birth");

                    b.Property<int?>("EngineCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("engine_capacity");

                    b.Property<string>("FuelType")
                        .HasColumnType("text")
                        .HasColumnName("fuel_type");

                    b.Property<DateTime>("IngestionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_time");

                    b.Property<DateTime?>("LossDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loss_date");

                    b.Property<string>("Make")
                        .HasColumnType("text")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("text")
                        .HasColumnName("policy_number");

                    b.Property<decimal?>("PreAccidentValue")
                        .HasColumnType("numeric")
                        .HasColumnName("pre_accident_value");

                    b.Property<decimal?>("RepairCost")
                        .HasColumnType("numeric")
                        .HasColumnName("repair_cost");

                    b.Property<int?>("Seats")
                        .HasColumnType("integer")
                        .HasColumnName("seats");

                    b.Property<string>("SourceId")
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.Property<string>("TotalLostDecision")
                        .HasColumnType("text")
                        .HasColumnName("total_lost_decision");

                    b.Property<string>("VehicleRegistrationNumber")
                        .HasColumnType("text")
                        .HasColumnName("vehicle_registration_number");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("year");

                    b.HasKey("MotorId");

                    b.ToTable("insure_wave_motor");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Exposure.ClaimZoneExposure", b =>
                {
                    b.HasOne("BigDataAcademy.Model.Claim.ClaimZoneClaim", "Claim")
                        .WithMany("Exposures")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Exposure.InsureWaveExposure", b =>
                {
                    b.HasOne("BigDataAcademy.Model.Claim.InsureWaveClaim", "Claim")
                        .WithMany("Exposures")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Claim.ClaimZoneClaim", b =>
                {
                    b.Navigation("Exposures");
                });

            modelBuilder.Entity("BigDataAcademy.Model.Claim.InsureWaveClaim", b =>
                {
                    b.Navigation("Exposures");
                });
#pragma warning restore 612, 618
        }
    }
}
